#include <WiFi.h>
#include <WebServer.h>

// Replace with your network credentials
const char* ssid = "enter-ssid";
const char* password = "enter-password";

// Create a web server object
WebServer server(80);

// Define the GPIO pin for the LED
const int ledPin = 2; // Change to your desired GPIO pin
bool ledState = false; // Store the current state of the LED

void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to ");
  Serial.println(ssid);
  
  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  
  // Connection established, print IP address
  Serial.println("");
  Serial.println("Connected to WiFi");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  //prints the ip address of the esp32 in the serial moniter
  //type http:// plus the given ip to open the host website
  //make sure that your device is connected to the same wifi as your esp32

  // Configure LED pin as an output
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW); // Initially turn off the LED

  // Start the web server
  server.begin();
  Serial.println("Web server started");

  // Add handler for root URL
  server.on("/", HTTP_GET, handleRoot);
  // Add handler for button press
  server.on("/on", HTTP_GET, handleOn);
}

void loop() {
  // Handle client requests
  server.handleClient();
}

// Handler for the root page
void handleRoot() {
  String page = "<html><body><h1>ESP32 Web Server</h1>";
  page += "<p>Click <a href=\"/on\">here</a> to turn the LED on/off.</p>";
  page += "</body></html>";
  server.send(200, "text/html", page);
}

// Handler for turning on/off the LED
void handleOn() {
  ledState = !ledState; // Toggle the LED state
  digitalWrite(ledPin, ledState ? HIGH : LOW); // Turn on/off the LED
  String response = ledState ? "LED turned on" : "LED turned off";
  server.send(200, "text/plain", response);
}
